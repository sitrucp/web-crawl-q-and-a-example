





Legend and polygon colors for Leaflet choropleth using Chroma.js – 009co Consulting





























		Skip to content













					009co Consulting
				


				Business Intelligence | Analytics | Digital Solutions
			
 















Welcome to 009co Consulting
Blog Posts
COVID-19 Data Analysis and Visualization
Environmental Science Experience
 









 










					009co Consulting
				


				Business Intelligence | Analytics | Digital Solutions
			
 







Main Menu

 









COVID-19 Data Analysis and VisualizationEnvironmental Science ExperienceWelcome to 009co ConsultingBlog Posts 










Legend and polygon colors for Leaflet choropleth using Chroma.js 
5 Comments 

			 / By  

				Curtis Pokrant			



		 /  May 30, 2020 


A Leaflet tutorial uses the following hard-coded getColor function to return colors.
// get color 
function getColor(n) {
    return n > 30 ? '#b10026'
           : n > 25 ? '#e31a1c' 
           : n > 25 ? '#fc4e2a' 
           : n > 20 ? '#fd8d3c'
           : n > 15  ? '#feb24c'
           : n > 10  ? '#fed976'
           : n > 5  ? '#ffeda0'
           : n > 0  ? '#ffffcc'
           : '#ffffff';
}
However, I wanted to use Chroma.js to generate the legend colors dynamically. So I needed a new getColor function.
Chroma.js has a variety of methods to return colors. The one I choose was using scale and classes. These can then be sent as variables to a getColor function to return colors to use in legend and map.
scale can be single value or an array of two colors (either as hex values or color words). In my case, the first is a light blue and the second is a darker blue. Chroma.js will then return gradients between these two colors. See colorHex variable below.
classes is an array of legend ‘breaks’ for the color gradients. For example they could be the numerical values from the Leaflet tutorial getColor function above (eg 10, 20, 50, etc). See classBreaks variable below.
The new getColor function is shown below:
var classBreaks = [1,50,100,250,500,1000,2000,3000,6000,9000];
var colorHex = ['#deebf7','#08306b'];

function getColor(n,classBreaks,colorHex) {
    var mapScale = chroma.scale(colorHex).classes(classBreaks);
    if (n === 0) {
        var regionColor = '#ffffff';
    } else { 
        var regionColor = mapScale(n).hex();
    }
    return regionColor
}
This getColor function can then be used as described in the Leaflet tutorial to set choropleth polygon fill colors. It also be used similarly to create the legend by looping through the classes to get a color for each legend entry.
However there is important consideration when creating the legend. Using scale and classes, Chroma.js only returns classes – 1 colors. For example the variable classBreaks array with 10 elements will only return 9 colors. To hack this I push a dummy element (‘999’) to the array so Chroma.js would return 10 colors and then ignore the dummy element when creating the legend.
The legend code is below includes hard-coded zero (0) value set to color white (#ffffff). Looping through the classBreaks each time using getColor function to return legend color based on break value.
var legend = L.control({position: 'topright'});

legend.onAdd = function (map) {
    var div = L.DomUtil.create('div', 'legend');
    div.innerHTML += '<i style="background: #ffffff;"></i>0
';
    classBreaks.push(999); // add dummy class to extend to get last class color, chroma only returns class.length - 1 colors
    for (var i = 0; i &lt; classBreaks.length; i++) {
        if (i+2 === classBreaks.length) {
            div.innerHTML += '<i style="background: ' + getColor(classBreaks[i], classBreaks, colorHex) + ';"></i> ' +
            classBreaks[i] + '+';
            break
        } else {
            div.innerHTML += '<i style="background: ' + getColor(classBreaks[i], classBreaks, colorHex) + ';"></i> ' +
            classBreaks[i] + '–' + classBreaks[i+1] + '<br>';
        }
    }
    return div;
};
legend.addTo(map);
The final map legend looks like this:





Post navigation
← Previous PostNext Post →
  Related Posts   


 

Introducing Cardivvy – a website showing Car2Go real time car locations, parking and service areas

 
Leave a Comment 

			 / API, Google Maps API, Javascript, PHP, Web Development / By  

				Curtis Pokrant			


 








 

Introducing Speedvisit – a quick and easy way to record visits from people

 
Leave a Comment 

			 / CakePHP, PHP, SaaS, Web Development / By  

				Curtis Pokrant			


 








 

How to move Google Chart x-axis to top of chart

 
Leave a Comment 

			 / Google Charts, Javascript / By  

				Curtis Pokrant			


 








 

Display Django queryset results on Google Map

 
4 Comments 

			 / Django, Google Maps API, Javascript / By  

				Curtis Pokrant			


 





 


				5 thoughts on “Legend and polygon colors for Leaflet choropleth using Chroma.js”			





Tim May 4, 2021 at 2:15 pm  


Hi Curtis,
thanks for the tutorial. I tried your code on my map but get error saying “mapScale is not a function”. The error is related to the line var mapScale = chroma.scale(colorHex).classes(classBreaks);
Do you know what I can do to solve the problem? Any help will be much appreciated.
Best regards,
Tim

Reply 
 






Curtis May 4, 2021 at 2:26 pm  


Hi Tim,
Check that the variables used in getColor function and mapScale variable eg “n,classBreaks,colorHex” are what is expected eg  n = integer and classBreaks and colorHex are arrays.
Here is result from my page:
console.log(“n:”, n,”classBreaks:”,classBreaks,”colorHex:”, colorHex,”regionColor:”, regionColor);
n: 156 classBreaks: (10) [1, 50, 100, 250, 500, 1000, 2000, 3000, 6000, 9000] colorHex: (2) [“#deebf7”, “#08306b”] regionColor: #a9bcd4
FYI, here is the code in action on functioning web page https://sitrucp.github.io/canada_covid_health_regions/canada.js.
Curtis

Reply 
 






Tim May 5, 2021 at 7:59 am  


Hi Curtis,
thanks for your reply. I solved the problem: 
as I am an html newbie, I forgot to change the input at the “fillColor: getColor” function to the required inputs from your function.
Think before you copy code I guess…
Tim

Reply 
 






Tim May 5, 2021 at 8:12 am  


Me again… Not all is good I guess. I can’t seem to get rid of the extra class in the upper right hand corner. Would you help me out one more time?
https://ibb.co/k3C9rNf
Thanks,
Tim

Reply 
 






Curtis May 5, 2021 at 1:09 pm  


Looks like it is working fine but my code was missing a line break at the end of if then statement which should fix that!
The original post had it but seems WordPress interpreted it as an actual line break and not something I want to show as code. 
Never noticed this before. Weird.
Code now updated! 
classBreaks[i] + '–' + classBreaks[i+1] + '';
should be
classBreaks[i] + '–' + classBreaks[i+1] + 'put line break here';


 












Leave a Comment Cancel ReplyYour email address will not be published. Required fields are marked *Type here..Name*
Email*
Website
 

Δ 
This site uses Akismet to reduce spam. Learn how your comment data is processed.






Recent Blog Posts


Gestalt communication facilitated by multi-modal generative AI?


Microsoft Windows Copilot General Availability September 26, 2023


Voip.ms get all call detail records using getCDR API


OpenAI ChatGPT 4 Advanced Data Analysis used to do river water flow analysis


Attended London Power BI User Group: Introducing Fabric! – London, UK – May 23, 2023


Fabric Dataflow Gen2 Web API connection with dynamic current date parameter


Attended Data Science Festival Mayday – London, UK – May 20, 2023


CBC news article comments analysis and visualization


Canada cell tower distribution QGIS visualization


CBC news article comments web scraping


Blog Categories

AI & ML (2)

Amazon Web Services (AWS) (7)

API (10)

Azure (4)

BeautifulSoup (5)

Business Intelligence (3)

CakePHP (3)

Chart.js (2)

ChatGPT (2)

D3.js (6)

Django (7)

Environmental science (3)

ERP (1)

Excel Pivot Chart (4)

Excel Pivot Table (4)

Fabric (2)

Flask (1)

Geocoding (6)

Google Adsense (1)

Google Analytics (3)

Google Calendar (1)

Google Charts (2)

Google Maps API (2)

Google Script (1)

Hadoop (2)

Javascript (14)

LLM (1)

Microsoft Copilot (1)

MS Access (1)

MySQL (2)

NetworkX (2)

NLTK (2)

Office 365 (8)

OneDrive (4)

Open Data (1)

Palm Pilot (1)

PHP (4)

Plotly (7)

Postgres (2)

Power BI (12)

Power Query (11)

Python (36)

QGIS (1)

Qlikview (1)

SaaS (1)

Science (1)

Sharepoint (6)

SQLAlchemy (1)

Tableau (6)

Twitter API (6)

VBA (1)

Web Development (14)

Xero (1)



Recent Comments
Curtis on Django form geocode submitted address to get lat, lon and postal codeMay 30, 2021Django forms have some complexity when first encountered. Recommend following any basic Django forms tutorial, and applying to your specific…
NS on Django form geocode submitted address to get lat, lon and postal codeMay 30, 2021Ah yes that does help to clear it up. However, I’m facing an issue now that whenever my form is…
Curtis on Django form geocode submitted address to get lat, lon and postal codeMay 25, 2021Hey NS, The data is saved to database by the form post action eg starting with: if request.method == 'POST':.…
NS on Django form geocode submitted address to get lat, lon and postal codeMay 25, 2021Hi Curtis, I’m relatively new to django and I’m trying to create a Django application where i can get a…
Curtis on Legend and polygon colors for Leaflet choropleth using Chroma.jsMay 5, 2021Looks like it is working fine but my code was missing a line break at the end of if then…

Login - Copyright 2021 009co





 







Copyright © 2023 009co Consulting
 









 Scroll to Top










